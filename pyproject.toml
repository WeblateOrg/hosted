[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=78.0.2"]

[project]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Internationalization",
  "Topic :: Software Development :: Localization",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
]
dependencies = [
  "Django>=5.2,<5.3",
  "django-appconf>=1.0",
  "django-countries==7.6.1",
  "django-vies==6.2.0",
  "fakturace==0.7.2",
  "psycopg[binary]",
  "python-dateutil",
  "requests",
  "Weblate>=5.5.3"
]
description = "Hosted Weblate Customization"
keywords = [
  "i18n",
  "l10n",
  "gettext",
  "git",
  "mercurial",
  "translate"
]
license = "GPL-3.0-or-later"
license-files = ["LICENSE"]
name = "wlhosted"
requires-python = ">=3.11"
version = "2025.1"

[[project.authors]]
email = "michal@weblate.org"
name = "Michal Čihař"

[project.optional-dependencies]
dev = [
  "wlhosted[lint,test]"
]
lint = [
  "pre-commit==4.2.0"
]
test = [
  "httpretty",
  "coverage",
  "build==1.2.2.post1",
  "twine==6.1.0"
]

[project.readme]
content-type = "text/x-rst"
file = "README.rst"

[project.urls]
Documentation = "https://docs.weblate.org/"
Download = "https://github.com/WeblateOrg/hosted"
Homepage = "https://weblate.org/"
"Issue Tracker" = "https://github.com/WeblateOrg/hosted/issues"
"Source Code" = "https://github.com/WeblateOrg/hosted"
Twitter = "https://twitter.com/WeblateOrg"

[tool.check-manifest]
ignore = [
  "LICENSES/*",
  "json/*",
  ".reuse/dep5",
  "scripts/*",
  "*.toml",
  "*.yml",
  "*.yaml",
  "*.json",
  ".editorconfig",
  ".weblate"
]

[tool.check-wheel-contents]
ignore = [
  "W004"  # Django migrations fail here
]

[tool.coverage.paths]
source = [
  "."
]

[tool.coverage.report]
exclude_also = [
  "@(abc\\.)?abstractmethod",
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",
  # Type checking
  "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
concurrency = ["thread", "multiprocessing"]
omit = [
  ".venv*/*"
]

[tool.isort]
profile = "black"

[tool.ruff]
target-version = "py311"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
ignore = [
  "D10",  # TODO: we are missing many docstrings
  "D203",  # CONFIG: incompatible with D211
  "D212",  # CONFIG: incompatible with D213
  "ISC001",  # CONFIG: formatter
  "D401",  # TODO: many strings need rephrasing
  "DJ001",  # TODO: Avoid using `null=True` on string-based fields such as CharField (maybe add noqa)
  "E501",  # WONTFIX: we accept long strings (rest is formatted by black)
  "T201",  # WONTFIX: using print() (maybe add noqa)
  "TRY003",  # WONTFIX: Avoid specifying long messages outside the exception class
  "PLR2004",  # TODO: Magic value used in comparison, consider replacing 201 with a constant variable
  "PLW2901",  # TODO: overwriting variables inside loop
  "N818",  # TODO: exception naming
  "COM",  # CONFIG: No trailing commas
  "PTH",  # TODO: Not using pathlib
  "FBT",  # TODO: Boolean in function definition
  "TD002",  # CONFIG: no detailed TODO documentation is required
  "TD003",  # CONFIG: no detailed TODO documentation is required
  "PT",  # CONFIG: Not using pytest
  "EM101",  # TODO: Exception must not use a string literal, assign to variable first
  "EM102",  # TODO: Exception must not use an f-string literal, assign to variable first
  "ARG001",  # TODO: Unused function argument (mostly for API compatibility)
  "ARG002",  # TODO: Unused method argument (mostly for API compatibility)
  "ARG003",  # TODO: Unused class method argument (mostly for API compatibility)
  "FIX002",  # CONFIG: we use TODO
  "RUF012",  # TODO: Mutable class attributes should be annotated with `typing.ClassVar`
  "ANN001",  # TODO: Missing type annotation for function argument
  "ANN002",  # TODO: Missing type annotation for `*args`
  "ANN003",  # TODO: Missing type annotation for `**kwargs`
  "ANN201",  # TODO: Missing return type annotation for public function
  "ANN202",  # TODO:  Missing return type annotation for private function
  "ANN204",  # TODO: Missing return type annotation for special method
  "ANN205",  # TODO: Missing return type annotation for staticmethod
  "ANN206",  # TODO: Missing return type annotation for classmethod
  "SLF001"  # TODO: Private member accessed (might need noqa tags)
]
select = ["ALL"]

[tool.ruff.lint.mccabe]
max-complexity = 16

[tool.ruff.lint.per-file-ignores]
"wlhosted/settings_*.py" = ["F405"]

[tool.setuptools]
include-package-data = true
zip-safe = true

[tool.setuptools.package-dir]
hosted = "hosted"

[tool.setuptools.packages.find]
namespaces = true
